#!/usr/bin/env zsh
running() {
	ps aux | grep $(echo "$1" | sed -e 's/^\(.\)/\[\1\]/')
}
audiolen() {
	if [ "$1" = "" ]; then
		ext=$(mostext)
	else
		ext="$1"
	fi
	out=$(find -maxdepth 1 -type f -name "*$ext" -print0 | xargs -0 mplayer -vo dummy -ao dummy -identify 2>/dev/null | perl -nle '/ID_LENGTH=([0-9\.]+)/ && ($t +=$1) && printf "%02d:%02d:%02d\n",$t/3600,$t/60%60,$t%60' | tail -n 1)
	if [ "$out" == "" ]; then
		echo 00:00:00
	else
		echo $out
	fi
}
rgb() {
	printf "\x1b[38;2;$1;$2;$3m"
}
printrgb() {
	printf "$(rgb $1 $2 $2)$4\n"
}
hex() {
	hex="$1"
	r=$(printf "%d\n" 0x${hex:0:2})
	g=$(printf "%d\n" 0x${hex:2:2})
	b=$(printf "%d\n" 0x${hex:4:2})
	printf "\x1b[38;2;$r;$g;${b}m$2\n"
}
printhex() {
	printf "$(hex $1 $2 $3)$4\n"
}
clip() {
	echo -n "$*" | cclip
}
printfunc() {
	grep --color=auto -zPo "$2[\s\S]*?(\{([^{}]++|(?1))*\})" $1
	echo ""
}
fileswap() {
	mv $1 "tmp"
	mv $2 $1
	mv "tmp" $2
}
lpass() {
	addons=~/projects/bash/lpass-addons
	state=0
	if [ "$1" == "logout" ]; then
		orig-lpass $1
		return
	elif [ "$1" == "generate" ]; then
		password=$($addons/lpass-generate $2)
		echo $password
		password=$(echo $password | tr -d ' ')
		echo -n $password | xclip -sel clip
		return
	elif [ "$1" == "copy" ]; then
		$addons/lpass-copy $2
		return
	fi
	status=$(orig-lpass status)
	if [ $? -ne 0 ]; then
		if [ "$status" = 'Not logged in.' ]; then
			orig-lpass login grantpauker@gmail.com 1>&2
			state=1
		else
			echo "Lastpass error: $status" 1>&2
		fi
	fi
	if [ "$1" == "add" ]; then
		$addons/lpass-add
	elif [ "$1" == "login" ] && [ $state -eq 0 ]; then
		orig-lpass login grantpauker@gmail.com
	else
		orig-lpass $*
	fi
}
up() {
	cd $(printf '../%.0s' $(seq 1 $1))
}
ports() {
	for sysdevpath in $(find /sys/bus/usb/devices/usb*/ -name dev); do
		syspath="${sysdevpath%/dev}"
		devname="$(udevadm info -q name -p $syspath)"
		[[ "$devname" == "bus/"* ]] && continue
		eval "$(udevadm info -q property --export -p $syspath)"
		[[ -z "$ID_SERIAL" ]] && continue
		echo "/dev/$devname - $ID_SERIAL" | grep -i "$1"
	done
}
loop() {
	while :; do
		eval "$*"
	done
}
len() {
	echo ${#1}
}
ipad() {
	ip addr show | grep "inet " | grep -v 127\.0\.0\.1 | sed "s@.*inet \(.*\)/.*@\1@g"
	curl ifconfig.me
}
btc() {
	cur=$(curl -s "https://api.coindesk.com/v1/bpi/currentprice/USD.json" | jq ".bpi | .USD | .rate_float")
	prev=$(curl -s "https://api.coindesk.com/v1/bpi/historical/close.json?for=yesterday" | jq " .bpi  | .[]")
	change=$(echo $(($cur-$prev)) | sed 's/\([0-9]*\.[0-9]\{2\}\).*/\1/g')
	per=$(echo $((100*$change/$prev)) | sed 's/\([0-9]*\.[0-9]\{2\}\).*/\1/g')
	if [[ "$change" -lt "0" ]]; then
		c="\e[0;31m"
	else
		c="\e[0;32m"
	fi
	echo "$cur | ${c}$change \e[0m| ${c}$per% $(rgb 255 255 255)"
}
log() {
	echo "${@:2}" | tee -a $1
}
random() {
	if [ "$1" == "" ]; then
		lower=0
	else
		lower=$1
	fi
	if [ "$2" == "" ]; then
		upper=101
	else
		if [ "$2" -lt "$1" ]; then
			echo "Second argument must be greater than the first"
			return
		fi
		upper=$(($2 + 1))
	fi
	echo $((RANDOM % (upper - lower) + lower))
}
flasher() {
	i=0
	while [ "$i" -lt "10" ]; do
		printf "\\e[?5h"
		sleep 0.1
		printf "\\e[?5l"
		read -s -n1 -t1 && break
		i=$((i + 1))
	done
}
binary() {
	echo "obase=2;$1" | bc
}
hcat(){
	occurences=$(sed 's/\(#[0-9A-Fa-f]\{6\}\)/\1\n/g' $1 | grep -co "\#[0-9a-fA-F]\{6\}")
	colors=($(sed ':a;N;$!ba;s/\n/ /g' "$1" | grep -o '\#[0-9a-fA-F]\{6\}[^0-9a-fA-F]' | sed 's/[^0-9a-fA-F#]//g' | awk '!a[$0]++'))
	for hex in "${colors[@]}"; do
		r=$(printf "%d\n" 0x${hex:1:2})
		g=$(printf "%d\n" 0x${hex:3:2})
		b=$(printf "%d\n" 0x${hex:5:2})
		if [[ "$((r*0.299 + g*0.587 + b*0.114))" -lt "186.0" ]]; then
			color="\x1b[38;2;255;255;255m"
		else
			color="\x1b[38;2;0;0;0m"
		fi
		printf "$color\x1b[48;2;${r};${g};${b}m$hex\e[0m\n"
	done
}
getcolor(){
  success=false
  exec < /dev/tty
  oldstty=$(stty -g)
  stty raw -echo min 0
  col=$1
  #          OSC   Ps  ;Pt ST
  echo -en "\033]4;${col};?\033\\" >/dev/tty  # echo opts differ w/ OSes
  result=
  if IFS=';' read -r -d '\' color ; then
      result=$(echo $color | sed -E 's/^.*\;//;s/[^0-9a-f/]|rgb://g;s/([0-9A-Fa-f]{2}){2}(\/|$)/\1/g')
      success=true
  fi
  stty $oldstty
  echo "#$result" | awk '{print toupper($0)}'
  $success
}
httpstatus(){
	curl -o /dev/null --silent --head --write-out "%{http_code}\n" "$1"
}
gitexist(){
	[[ "$(git ls-remote $1)" != "" ]]
}
aur(){
	url="https://aur.archlinux.org/$1.git"
	if ! gitexist "$url"; then	
		echo "error: target not found: $1"
	else
		cd ~/builds/aur
		git clone "$url"
		cd $1
	fi
}
getapp(){
	id=$(xprop -root 32x '\t$0' _NET_ACTIVE_WINDOW | cut -f 2)
	if [[ "$id" == "0x0" ]]; then
		echo "nil"
		return 0
	fi
	pid=$(xprop -id $id _NET_WM_PID | cut -d' ' -f 3)
	exe=$(readlink -f /proc/$pid/exe)
	basename $exe
}
ctouch(){
	touch $1.hpp
	touch $1.cpp
	printf "#ifndef\n#define\n\n#endif" >> $1.hpp
	printf "#include \"$1.hpp\"" >> $1.cpp
}
bulkrename(){
	BAD=0
	for f in $*; do 
		if ! [ -e "$f" ] || ! [ -d "$f" ]; then 
			echo "not a file or dir: $f"
			BAD=1
		fi
	done
	if [[ $BAD -eq 1 ]]; then return; fi
	tmp=$(mktemp /tmp/XXXXXXXX)
	tmp2=$(mktemp /tmp/XXXXXXXX)
	(echo $* | tr ' ' '  \n' ) >> $tmp
	cp $tmp $tmp2
	vim $tmp
	paste -d " " $tmp2 $tmp | awk '{print "mv -vfi " $0}' | while read line; do eval $line; done
}
long(){
	echo $* | tr '[:lower:]' '[:upper:]' | sed -e 's/\(.\)/\1 /g'
}
intoggle(){
	for id in $*; do
		echo $id
		if xinput list $id | grep -i --quiet disable; then
			xinput enable $id
		else
			xinput disable $id
		fi
	done
}
function $ { 
	"$@"
}
cdiff(){
	diff $@ | colordiff
}
psearch(){
	if ! [[ -v PSEARCH_DIR ]]; then
		echo "PSEARCH_DIR not set, exiting"
		return
	fi
	depth=$(($(realpath $PSEARCH_DIR | awk -F"/" '{print NF-1}')+2))
	f=$(find $PSEARCH_DIR -maxdepth 2 -mindepth 2 -type d | cut -d'/' -f $depth- | fzf)
	cd $PSEARCH_DIR/$f
}
ztheme(){
	export ZSH_THEME="$1"
	source $ZSH/oh-my-zsh.sh
}
newline(){
	printf '%s\n' "$@"
}
superscript(){
	echo $* | sed -E -e 's/a|A/ᵃ/g;s/b|B/ᵇ/g;s/c|C/ᶜ/g;s/d|D/ᵈ/g;s/e|E/ᵉ/g;s/f|F/ᶠ/g;s/g|G/ᵍ/g;s/h|H/ʰ/g;s/i|I/ᶦ/g;s/j|J/ʲ/g;s/k|K/ᵏ/g;s/l|L/ˡ/g;s/m|M/ᵐ/g;s/n|N/ⁿ/g;s/o|O/ᵒ/g;s/p|P/ᵖ/g;s/r|R/ʳ/g;s/s|S/ˢ/g;s/t|T/ᵗ/g;s/u|U/ᵘ/g;s/v|V/ᵛ/g;s/w|W/ʷ/g;s/x|X/ˣ/g;s/y|Y/ʸ/g;s/z|Z/ᶻ/g'
}
mmerge(){
	ext="${1##*.}"
	case "$ext" in
	"mp4")
		ffmpeg -i "$1" -i "$2" -c copy -c:s mov_text "srt-$1" ;;
	"mkv")
		ffmpeg -i "$1" -i "$2" -map 0 -map 1 -c copy "srt-$1" ;;
	esac
}
run(){
	setsid nohup $* > /dev/null
}
dimensions(){
	ffprobe -v quiet -print_format json -show_format -show_streams "$1" | jq -r '"\(.streams[0].width)x\(.streams[0].height)"'
}
cleep(){
	for f in $(seq 1 $1); do
		sleep 1
		echo $f
	done
}
duration(){
	ffprobe -i "$1" -v quiet -print_format json -show_format | jq -r '.format.duration'
}
format-time() {
 ((h=${1}/3600))
 ((m=(${1}%3600)/60))
 ((s=${1}%60))
 printf "%02d:%02d:%02d\n" $h $m $s
}
duration () {
	sum=0
	for f in $*; do
		t=$(ffprobe -i $f -v quiet -print_format json -show_format | jq -r '.format.duration')
		sum=$((sum+t))
	done
	format-time $(echo $sum | sed 's/\(.*\)\..*/\1/g')
}
ext(){
	echo ${1%.*}
}
episodes(){
	curl -s $1 | awk '/class="change_translation_text" data-language="en"/{getline; gsub(/<\/span>/,""); gsub(/^[ \t]+|[ \t]+$/, "");$1=$1;gsub(/ /,"-");gsub(/..$/,"");gsub(/,|'"'"'|"/,"");print tolower($0)}'
}

remaining(){
	local TIME=$(echo '{ "command": ["get_property_string", "time-remaining"] }' | socat - /tmp/mpvsocket | jq -r .data)
	local SPEED=$(echo '{ "command": ["get_property_string", "speed"] }' | socat - /tmp/mpvsocket | jq -r .data)
	local REMAINING=$((TIME/SPEED))
	printf '%d:%02d:%02d\n' $(($REMAINING/3600)) $(($REMAINING%3600/60)) $(($REMAINING%60))
}
chemhw(){
	curl -s --cookie ~/.cookies/bertier.txt https://sites.google.com/a/sandi.net/bertierchemistry2018/home/honors-chemistry\?pli\=1 | tidy -q 2>/dev/null | awk -v m=1 '/Week/{count++; next} count == m' | lynx --stdin --dump
	#curl -s --cookie ~/.cookies/bertier.txt https://sites.google.com/a/sandi.net/bertierchemistry2018/home/honors-chemistry\?pli\=1 | xmllint --html --xpath '//*[@dir="ltr"]' - 2>/dev/null | tidy -q 2>/dev/null | awk -v m=1 '/Week/{count++; next} count == m' | lynx --stdin --dump
}
mc(){
	mkdir $1
	cd $1
}
password(){
	curl https://raw.githubusercontent.com/first20hours/google-10000-english/master/google-10000-english-usa.txt -s | shuf -n $1 | tr '\n' ' '
	echo
}
decode(){
	echo $* | base64 --decode | tee >(xclip -sel clip)
}
